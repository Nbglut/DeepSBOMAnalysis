from SBOM_generate import SBOM_generate
from DeepAnalysis import DeepAnalysis
from CompareSBOMs import CompareSBOMs
from CompareLocalSBOMWithRemote import CompareLocalSBOMWithRemote
from recursivelyGenerate import  recursivelyGenerate
import json
import asyncio
import aiohttp
       
       
 
   
async def main():
     gen=SBOM_generate()
     owner = input("Enter GitHub repo owner: ")
     repo = input("Enter GitHub repo name: ")

     gen.generate_sbom(owner,repo)
     filesToAnalyze=gen.get_SBOMs()
     
     print("Select Way to analyze:")
     print("  0. All")
     print("  1. Deep Analysis")
     print("  2. Compare to Ground Truth")
     print("  3. Recursive Generator Creation With Both")
     print("  4. None")    
     selection = input("Enter your choice: ").strip()
     choices = {"1": "deep", "2": "compare", "3": "recursiveGen"}
     ground_truth=""
     selected_analysis = set(choices.values()) if "0" in selection else {choices[c] for c in selection.split(",") if c in choices}   
     if "compare" in selected_analysis or "recursiveGen" in selected_analysis:
        ground_truth_file = input("Directory to Ground Truth File: ").strip()
        ground_truth=CompareLocalSBOMWithRemote(ground_truth_file).getFileContents()
        
         
     print("Going to analyze : " + str(filesToAnalyze))
     for files in filesToAnalyze:
          with open(files, 'r') as file:
                fileContents = json.load(file)
          type="microsoft"
          if 'github' in files:
              type='GitHub'
          elif '_syft' in files:
              type='Syft'
          elif '_trivy' in files:
              type='Trivy'
          print("\n\n\n ***OUTPUT FOR THE SBOM GENERATED  BY " + type + "***\n\n\n")

          if 'sbom' in fileContents:
                fileContents=fileContents['sbom']
          if "deep"  in selected_analysis:
             analyzer=DeepAnalysis(fileContents, owner,repo)
             await analyzer.Analyze()
             missing_packs=analyzer.getMissingPacks()    
             missingdirect= analyzer.getMissingDirectPacks()
             print("\nDeep Analysis Results:\n\nThe SBOM generated by " + type +" is missing " + str(len(missing_packs)) + " transitive dependencies of dependencies already present in it & added direct dependencies.\n")
             print("The SBOM generated by " + type +" is missing " + str(len(missingdirect)) + " direct dependencies of the repo.\n")

          if "compare" in selected_analysis:
               print("\n\nComparing to Ground Truth Results: \n")
               compares=CompareSBOMs(files)
               compares.setTruth(ground_truth)
               compares.setNonTruth(fileContents)
               compares.compareSBOMs()

          if "recursiveGen" in selected_analysis:
               print("\n\nRecursively Generating the SBOM: \n")
               newfile=recursivelyGenerate(fileContents, type.lower(), files)
               #Compare with newtruth
               compares2=CompareSBOMs("")
               compares2.setTruth(ground_truth)
               compares2.setNonTruth(newfile)
               print("\nComparision of Recursive Generation to ground truth:\n")
               compares2.compareSBOMs()
               analyzer=DeepAnalysis(newfile, owner,repo)
               await analyzer.Analyze()
               missing_packs=analyzer.getMissingPacks()    
               missingdirect= analyzer.getMissingDirectPacks()
               print("\nDeep Analysis Results on Recursively Generated:\n\nThe SBOM  RECURSIVELY generated by " + type +" is missing " + str(len(missing_packs)) + " transitive dependencies of dependencies already present in it & added direct dependencies.\n")

               print("The SBOM generated by " + type +" is missing " + str(len(missingdirect)) + " direct dependencies of the repo.\n")


        
if __name__ == "__main__":
        asyncio.run(main())
